// Extra Credit:
// Code has been reformatted
// Game resolution has been changed to bigger screen resolution 1920*1080
// fix

#include <SFML/Graphics.hpp>
#include <SFML/Audio.hpp>
#include <time.h>
#include <list>
#include <cmath>


using namespace sf;

const int W = 1920;
const int H = 1080;

float DEGTORAD = 0.017453f;

// Animation class
// Description: For the animation of the explosion
class Animation {
public:
    float Frame, speed;
    Sprite sprite;
    std::vector<IntRect> frames;

    // Animation constructor
    Animation() {}

    // Animation code block
    Animation(Texture &t, int x, int y, int w, int h, int count, float Speed) {
        Frame = 0;
        speed = Speed;

        for (int i = 0; i < count; i++) {
            frames.push_back(IntRect(x + i * w, y, w, h));
            sprite.setTexture(t);
            sprite.setOrigin(w / 2, h / 2);
            sprite.setTextureRect(frames[0]);
        }
    }

    // Updates animation for the next time animation
    void update() {
        Frame += speed;
        int n = frames.size();
        if (Frame >= n) {
            Frame -= n;
        }
        if (n > 0) {
            sprite.setTextureRect(frames[int(Frame)]);
        }
    }

    // Checks if animation finished or not
    bool isEnd() {
        return Frame + speed >= frames.size();
    }

};

// Base class
class Entity {
public:
    float x, y, dx, dy, R, angle;
    bool life;  // T or F - dead or alive
    std::string name;
    Animation anim;

    // Constructor initialize the value of variable life = 1
    Entity() {
        life = 1; // Alive
    }

    // Sets the values of input to the new variables
    void settings(Animation &a, int X, int Y, float Angle = 0, int radius = 1) {
        anim = a;
        x = X;
        y = Y;
        angle = Angle;
        R = radius;
    }

    // Updating positions
    virtual void update() {};

    // Draws the animation to the screen
    void draw(RenderWindow &app) {
        anim.sprite.setPosition(x, y);
        anim.sprite.setRotation(angle + 90);
        app.draw(anim.sprite);

        CircleShape circle(R);
        circle.setFillColor(Color(255, 0, 0, 170));
        circle.setPosition(x, y);
        circle.setOrigin(R, R);
        //app.draw(circle);
    }

// Destructor
    virtual ~Entity() {};
};

// Derived class from the base class entity
// Asteroids for the game
class asteroid : public Entity {
public:
    // Asteroid constructor
    asteroid() {
        /*++count;*/
        dx = rand() % 8 - 4;
        dy = rand() % 8 - 4;
        name = "asteroid";
    }

    static int getCount(){
        return count;
    }

    ~asteroid(){
        --count;
    }
    // Updates the location of the asteroids
    void update() {
        x += dx;
        y += dy;

        // it let asteroid come around screen
        if (x > W) {
            x = 0;
        }
        if (x < 0) {
            x = W;
        }
        if (y > H) {
            y = 0;
        }
        if (y < 0) {
            y = H;
        }
    }


private:
    static unsigned int count;

};

// Derived class from the base class entity
// UFO for the game
class ufo : public Entity {
public:
    // ufo constructor
    ufo() {
        dx = rand() % 8 - 4;
        dy = rand() % 8 - 4;
        name = "ufo";
    }



    // Updates the location of the ufo
    void update() {
        x += dx;

        if (x > W || x < 0 || y > H || y < 0) {
            life = 0;
        }
       /* // it let ufo come around screen
        if (x > W) {
            x = 0;
        }
        if (x < 0) {
            x = W;
        }
        if (y > H) {
            y = 0;
        }
        if (y < 0) {
            y = H;
        }*/
    }

};


// Derived class from the base class entity
// UFO for the game
class diamond : public Entity {
public:
    // ufo constructor
    diamond() {
        dx = rand() % 8 - 4;
        dy = rand() % 8 - 4;
        name = "diamond";
    }

    // Updates the location of the ufo
    /*void update() {
        x = dx;
        y = dy;
    }*/

};

// Derived class from the base class entity
// Bullet for the game
class bullet : public Entity {
public:
    // Bullet constructor
    bullet() {
        name = "bullet";
    }

    // Updates the location of bullets
    void update() {
        dx = cos(angle * DEGTORAD) * 6;
        dy = sin(angle * DEGTORAD) * 6;
        // angle+=rand()%6-3;
        x += dx;
        y += dy;

        // If bullet goes of the screen it get deleted
        if (x > W || x < 0 || y > H || y < 0) {
            life = 0;
        }
    }

};

// Derived class form the base class entity
// Player or Spaceship for the game
class player : public Entity {
public:

    bool thrust;
    // Player Constructor
    player() {
        name = "player";
    }

    // Updates the location of the player
    void update() {

        // if thrust is applied then it boost the speed of player position
        if (thrust) {
            dx += cos(angle * DEGTORAD) * 0.2;
            dy += sin(angle * DEGTORAD) * 0.2;
        }

        // else thrust is not applied then it moves at constant speed
        else {
            dx *= 0.99;
            dy *= 0.99;
        }

        // Controls the speed of thrust
        int maxSpeed = 15;
        float speed = sqrt(dx * dx + dy * dy);
        if (speed > maxSpeed) {
            dx *= maxSpeed / speed;
            dy *= maxSpeed / speed;
        }

        x += dx;
        y += dy;

        // This code block allows the spaceship to come around on screen
        if (x > W) {
            x = 0;
        }
        if (x < 0) {
            x = W;
        }
        if (y > H) {
            y = 0;
        }
        if (y < 0) {
            y = H;
        }
    }

};

// This code checks if the bullet hit the asteroid then return the T or F
bool isCollide(Entity *a, Entity *b) {
    return (b->x - a->x) * (b->x - a->x) +
           (b->y - a->y) * (b->y - a->y) <
           (a->R + b->R) * (a->R + b->R);
}

unsigned int asteroid::count(0);

int main()
{
    srand(time(0));

    // Creates the window of W*H ie. 1024*728
    // FPS = 60FPS
    RenderWindow app(VideoMode(W, H), "Asteroids!");
    app.setFramerateLimit(60);

    Texture t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;
    if (!t1.loadFromFile("images/spaceship.png")) {
        return EXIT_FAILURE;
    }
    if (!t2.loadFromFile("images/background.jpg")) {
        return EXIT_FAILURE;
    }
    if (!t3.loadFromFile("images/explosions/type_C.png")) {
        return EXIT_FAILURE;
    }
    if (!t4.loadFromFile("images/rock.png")) {
        return EXIT_FAILURE;
    }
    if (!t5.loadFromFile("images/fire_blue.png")) {
        return EXIT_FAILURE;
    }
    if (!t6.loadFromFile("images/rock_small.png")) {
        return EXIT_FAILURE;
    }
    if (!t7.loadFromFile("images/explosions/type_B.png")) {
        return EXIT_FAILURE;
    }
    if (!t8.loadFromFile("images/alien.png")) {
        return EXIT_FAILURE;
    }
    if (!t9.loadFromFile("images/diamond.png")) {
        return EXIT_FAILURE;
    }


    t1.setSmooth(true);
    t2.setSmooth(true);

    Font f1;

    if (!f1.loadFromFile("fonts/MutantAcademyBB.ttf")) {
        return EXIT_FAILURE;
    }

    SoundBuffer s1, s2, s3;
    Sound sound, sound1;

    if (!s1.loadFromFile("sounds/Explosion.ogg")) {
        return EXIT_FAILURE;
    }

    if(!s2.loadFromFile("sounds/Bullet.ogg")) {
        return EXIT_FAILURE;
    }

    if(!s3.loadFromFile("sounds/ufo.ogg")) {
        return EXIT_FAILURE;
    }


    // Sets background
    Sprite background(t2);

    // Sets the coordinates of images so it only displays the part needed
    Animation sExplosion(t3, 0, 0, 256, 256, 48, 0.5);
    Animation sRock(t4, 0, 0, 64, 64, 16, 0.2);
    Animation sRock_small(t6, 0, 0, 64, 64, 16, 0.2);
    Animation sBullet(t5, 0, 0, 32, 64, 16, 0.8);
    Animation sPlayer(t1, 40, 0, 40, 40, 1, 0);
    Animation sPlayer_go(t1, 40, 40, 40, 40, 1, 0);
    Animation sExplosion_ship(t7, 0, 0, 192, 192, 64, 0.5);
    Animation sUfo(t8, 0, 0, 128, 128, 1, 0);
    Animation sDiamond(t9, 0, 0, 24, 24, 1, 0);



    std::list<Entity *> entities;
    int asteroid_kill = 0;
    int life_player = 3;
    // Spawns the asteroid on the screen at random locations

    if (asteroid::getCount() == 0){
        for (int i = 0; i < 15; i++) {
            asteroid *a = new asteroid();
            a->settings(sRock, rand() % W, rand() % H, rand() % 360, 25);
            entities.push_back(a);
        }
    }





    // Spawns the spaceship on the screen at location (200,200)
    player *p = new player();
    p->settings(sPlayer, 200, 200, 0, 20);
    entities.push_back(p);



    /////main loop/////

    while (app.isOpen()) {
        Event event;
        while (app.pollEvent(event)) {

            if (event.type == Event::Closed) {
                app.close();
            }

            if (event.type == Event::KeyPressed) {
                if (event.key.code == Keyboard::Space) {
                    sound.setBuffer(s2);
                    sound.play();
                    bullet *b = new bullet();
                    b->settings(sBullet, p->x, p->y, p->angle, 10);
                    entities.push_back(b);
                }
            }
        }

        if (Keyboard::isKeyPressed(Keyboard::Right)) {
            p->angle += 3;
        }
        if (Keyboard::isKeyPressed(Keyboard::Left)) {
            p->angle -= 3;
        }
        if (Keyboard::isKeyPressed(Keyboard::Up)) {
            p->thrust = true;
        } else {
            p->thrust = false;
        }


        for (auto a:entities) {
            for (auto b:entities) {
                if (a->name == "asteroid" && b->name == "bullet") {
                    if (isCollide(a, b)) {
                        a->life = false;
                        b->life = false;
                        asteroid_kill += 1;
                        if ((asteroid_kill + 1) % 4 == 0) {
                            diamond *d = new diamond();
                            d->settings(sDiamond, rand() % W, rand() % H, 270, 0);
                            entities.push_back(d);
                        }
                        if ((asteroid_kill + 1) % 5 == 0) {
                            // Spawns the ufo on the screen at random locations
                            sound1.setBuffer(s3);
                            sound1.play();
                            sound1.setLoop(true);
                            ufo *u = new ufo();
                            u->settings(sUfo, rand() % W, rand() % H, rand() % 360, 25);
                            entities.push_back(u);
                        }


                        Entity *e = new Entity();
                        e->settings(sExplosion, a->x, a->y);
                        e->name = "explosion";
                        sound.setBuffer(s1);
                        sound.play();
                        entities.push_back(e);


                        /* for (int i = 0; i < 2; i++) {
                             if (a->R == 15) {
                                 continue;
                             }
                             Entity *e = new asteroid();
                             e->settings(sRock_small, a->x, a->y, rand() % 360, 15);
                             entities.push_back(e);
                         }
 */
                    }
                }

                if (a->name == "player" && b->name == "asteroid") {
                    if (isCollide(a, b)) {
                        b->life = false;
                        asteroid_kill += 1;
                        life_player -= 1;
                        Entity *e = new Entity();
                        e->settings(sExplosion_ship, a->x, a->y);
                        e->name = "explosion";
                        sound.setBuffer(s1);
                        sound.play();
                        entities.push_back(e);

                        p->settings(sPlayer, W / 2, H / 2, 0, 20);
                        p->dx = 0;
                        p->dy = 0;
                    }
                }
            }
        }

        for (auto a:entities) {
            for (auto b:entities) {
                if (a->name == "ufo" && b->name == "bullet") {
                    if (isCollide(a, b)) {
                        a->life = false;
                        b->life = false;

                        Entity *e = new Entity();
                        e->settings(sExplosion, a->x, a->y);
                        e->name = "explosion";
                        sound.setBuffer(s1);
                        sound.play();
                        sound1.stop();
                        entities.push_back(e);

                    }
                }

                if (a->name == "player" && b->name == "ufo") {
                    if (isCollide(a, b)) {
                        b->life = false;
                        life_player -= 1;
                        Entity *e = new Entity();
                        e->settings(sExplosion_ship, a->x, a->y);
                        e->name = "explosion";
                        sound.setBuffer(s1);
                        sound.play();
                        sound1.stop();
                        entities.push_back(e);

                        p->settings(sPlayer, W / 2, H / 2, 0, 20);
                        p->dx = 0;
                        p->dy = 0;
                    }
                }
            }
        }



        if (p->thrust) {
            p->anim = sPlayer_go;
        } else {
            p->anim = sPlayer;
        }


        for (auto e:entities) {
            if (e->name == "explosion") {
                if (e->anim.isEnd()) {
                    e->life = 0;
                }
            }
        }

        if (asteroid_kill % 15 == 0 and asteroid_kill != 0){
            for (int i = 0; i < 15; i++) {
                asteroid *a = new asteroid();
                a->settings(sRock, rand() % W, rand() % H, rand() % 360, 25);
                entities.push_back(a);
            }
        }

        /*   if (rand() % 150 == 0) {
               asteroid *a = new asteroid();
               a->settings(sRock, 0, rand() % H, rand() % 360, 25);
               entities.push_back(a);
           }*/

        for (auto i = entities.begin(); i != entities.end();) {
            Entity *e = *i;

            e->update();
            e->anim.update();

            if (e->life == false) {
                if (e->name == "ufo"){
                    sound1.stop();
                }
                i = entities.erase(i);
                delete e;
            } else {
                i++;
            }
        }




        //////draw//////




        app.draw(background);
        Text text, text2, text3;
        text.setFont(f1);
        text.setFillColor(Color::White);
        text.setString("Asteroid Destroyed " + std::to_string(asteroid_kill));
        text.setPosition(5, 0);
        text.setCharacterSize(40);
        app.draw(text);

        text2.setFont(f1);
        text2.setFillColor(Color::Red);
        text2.setString("Life " + std::to_string(life_player));
        text2.setCharacterSize(40);
        text2.setPosition(5, 30);
        app.draw(text2);

        text3.setFont(f1);
        text3.setString("intiated");
        text3.setPosition(5, 50);
        app.draw(text3);

        // polymorphism
        for (auto i:entities) {
            i->draw(app);
        }

        app.display();
    }


    return 0;
}
